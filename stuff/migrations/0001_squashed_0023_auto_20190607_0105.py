# Generated by Django 2.2 on 2019-06-07 01:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='ShowStop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Show Stop Trigger',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_name', models.CharField(max_length=250)),
                ('show_date', models.DateField(blank=True)),
                ('slot_start', models.TimeField(blank=True)),
                ('slot_end', models.TimeField(blank=True)),
                ('performance_start', models.TimeField(blank=True)),
                ('performance_end', models.TimeField(blank=True)),
                ('company_name', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='stuff.Company')),
                ('performance_venue', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.DO_NOTHING, to='stuff.Venue')),
                ('ticketing_id', models.IntegerField(blank=True, help_text='Go to the <a href="https://ticketing.newtheatre.org.uk/" target="_blank">Ticketing Site</a>, select a show and use the first number in the URL: /SHOWID/0.', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DayReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('auditorium_bar_sales', models.IntegerField(blank=True)),
                ('studio_bar_sales', models.IntegerField(blank=True)),
                ('vendor_notes', models.TextField(blank=True, help_text="Include each vendor, their day's takings, and any other notes")),
                ('weather', models.CharField(blank=True, max_length=200)),
                ('overall_atmosphere', models.TextField(blank=True)),
                ('approx_footfall', models.IntegerField(blank=True)),
                ('notes', models.TextField(blank=True, help_text='Any other points worth noting from the day.')),
            ],
        ),
        migrations.CreateModel(
            name='LogReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('A', 'Accident'), ('I', 'Incident'), ('C', 'Complaint')], max_length=50)),
                ('author_name', models.CharField(max_length=100)),
                ('subject_name', models.CharField(max_length=100)),
                ('report_text', models.TextField()),
                ('report_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='FOHReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audience_behaviour', models.TextField(blank=True)),
                ('foyer_atmosphere', models.TextField(blank=True)),
                ('show_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stuff.Show')),
            ],
            options={
                'verbose_name': 'FOH Report',
                'verbose_name_plural': 'FOH Reports',
            },
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('using_workshop', models.BooleanField(default=False)),
                ('using_storage', models.BooleanField(default=False)),
                ('storage_notes', models.CharField(default='None', help_text='What is this company bringing to store?', max_length=250)),
                ('using_props', models.BooleanField(default=False)),
                ('prop_notes', models.CharField(default='None', help_text='What props/costume is this show using from the Theatre?', max_length=250)),
                ('effects', models.CharField(default='None', help_text='Effects used in this show, eg: strobe, smoke, haze, pyro.', max_length=200)),
                ('fire_alarm_disabled', models.BooleanField(default=False)),
                ('theatre_notes', models.TextField(blank=True)),
                ('seating_layout', models.CharField(choices=[('E', 'End-on'), ('T', 'Thrust'), ('R', 'In the round'), ('O', 'Other (add in notes)')], default='E', max_length=50)),
                ('set_details', models.CharField(default='No set', max_length=200)),
                ('set_notes', models.TextField(blank=True)),
                ('lighting', models.CharField(default='None', max_length=250)),
                ('sound', models.CharField(default='None', max_length=250)),
                ('video', models.CharField(default='None', max_length=250)),
                ('tech_notes', models.TextField(blank=True)),
                ('show_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stuff.Show')),
                ('rigging', models.CharField(default='None', help_text='Any additional rigging that is required.', max_length=250)),
            ],
            options={
                'verbose_name': 'Requirements Form',
                'verbose_name_plural': 'Requirements Forms',
            },
        ),
        migrations.CreateModel(
            name='VenueReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_start', models.TimeField(blank=True, null=True)),
                ('get_in_notes', models.TextField(blank=True, null=True)),
                ('house_open', models.TimeField(blank=True, null=True)),
                ('performance_start', models.TimeField(blank=True, null=True)),
                ('performance_notes', models.TextField(blank=True, null=True)),
                ('performance_end', models.TimeField(blank=True, null=True)),
                ('house_clear', models.TimeField(blank=True, null=True)),
                ('get_out_notes', models.TextField(blank=True, null=True)),
                ('slot_end', models.TimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('show_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stuff.Show')),
            ],
        ),
        migrations.CreateModel(
            name='Induction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(help_text='Who is filling this form out?', max_length=100)),
                ('show_member', models.CharField(help_text='Who are you speaking to?', max_length=100)),
                ('show_phone', models.IntegerField(help_text='What is their phone number?')),
                ('show_role', models.CharField(blank=True, help_text='What is their role in the company?', max_length=30)),
                ('show_stop_notes', models.TextField(blank=True, help_text='If there are any Show Stop Triggers, provide details about them here.')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('show_stop', models.ManyToManyField(blank=True, to='stuff.ShowStop')),
                ('show_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='stuff.Show')),
                ('comp_list', models.TextField(blank=True, help_text='Please list the full names of all people receiving complimentary tickets.')),
                ('comps', models.IntegerField(default=0)),
                ('latecomers', models.CharField(choices=[('N', 'No latecomers'), ('Y', 'Latecomers up to the first 15 minutes of the show')], default='N', help_text='May latecomers be permitted?', max_length=30)),
                ('minimum_audience', models.CharField(default='No minimum', help_text='Is there a minimum audience to which this company will perform?', max_length=255)),
                ('show_end', models.CharField(default='House lights up', help_text='How does the show end? Is this indicated in a certain way?', max_length=200)),
                ('performers_pass', models.BooleanField(default=False, help_text='Have you informed the company that they can see all the shows today at a discounted rate?')),
                ('shown_spaces', models.BooleanField(default=False, help_text='Have you shown the company around the theatre, showing them the areas they can use?')),
            ],
        ),
    ]
